<?xml version="1.0" encoding="UTF-8"?>
<!--
// $Id$
// Enki generates and implements the JMI and MDR APIs for MOF metamodels.
// Copyright (C) 2007-2007 The Eigenbase Project
// Copyright (C) 2007-2007 Disruptive Tech
// Copyright (C) 2007-2007 LucidEra, Inc.
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
-->

<!-- Enki ant script for developer builds -->

<project name="enki" basedir="." default="compile">
  <property name="enki.dir" location="."/>

  <import file="buildMacros.xml"/>

  <!-- classpath for main build -->
  <path id="enki.build.classpath">
    <pathelement path="${enki.3p.build.classpath}"/>
  </path>
  <property name="enki.build.classpath" refid="enki.build.classpath"/>

  <!-- classpath for sample build -->
  <path id="enki.sample.build.classpath">
    <pathelement path="${enki.build.classpath}"/>
    <pathelement path="${classes.dir}"/>
  </path>
  <property name="enki.sample.build.classpath" refid="enki.sample.build.classpath"/>

  <!-- classpath for sample-dependent build -->
  <path id="enki.sample.classpath">
    <pathelement path="${enki.sample.build.classpath}"/>
    <pathelement path="${sample.jar}"/>
  </path>
  <property name="enki.sample.classpath" refid="enki.sample.classpath"/>

  <!-- classpath for execution -->
  <path id="enki.run.classpath">
    <pathelement path="${classes.dir}"/>
    <pathelement path="${src.dir}"/>
    <pathelement path="${enki.3p.run.classpath}"/>
  </path>
  <property name="enki.run.classpath" refid="enki.run.classpath"/>

  <property name="test.dir" location="${enki.dir}/test"/>
  <property name="test.config.dir" location="${test.dir}/config"/>
  <property name="test.results.dir" location="${test.dir}/results"/>

  <!-- Sample Catalog properties -->
  <property name="sample.dir" location="${test.dir}/sample"/>
  <property name="sample.catalog.dir" location="${sample.dir}/catalog"/>
  <property 
    name="sample.model.xmi" 
    location="${sample.catalog.dir}/xmi/EnkiSampleMetamodel.xmi"/>
  <property name="sample.jar" location="${sample.dir}/sample.jar"/>

  <!-- classpath for Sample model implementation JAR -->
  <path id="sample.mdr.classpath">
    <pathelement location="${sample.jar}"/>
    <path refid="enki.run.classpath"/>
    <path refid="ant.classpath"/>
  </path>

  <!-- 
    Implementation type.  One of hibernate, netbeans.  Defaults to
    value from customBuild.properties.
  -->
  <property name="enki.impl" value="${enki.impl.default}"/>

  <target name="createClasspathFile">
    <delete file="${file.classpath}" quiet="true"/>
    <echo file="${file.classpath}" message="${enki.run.classpath}"/>
  </target>
  <property name="file.classpath" location="${enki.dir}/classpath.gen"/>

  <target name="configureSampleRepository">
    <copy 
        file="${test.config.dir}/${enki.impl}/TestStorage.properties"
        tofile="${test.dir}/TestStorage.properties"
        overwrite="true">
      <filterset begintoken="$${" endtoken="}">
        <filter token="ENKI_CATALOG_DIR" value="${sample.catalog.dir}"/>
      </filterset>
    </copy>
  </target>

  <target 
      name="cleanSampleRepository"
      depends="compile.dependencies,enki_mdr.taskdef,configureSampleRepository">
    <property 
      file="${test.dir}/TestStorage.properties" 
      prefix="cleanSampleRepos"/>

    <if>
      <and>
        <not>
          <equals arg1="${enki.impl}" arg2="netbeans"/>
        </not>
        <length
            string="${cleanSampleRepos.hibernate.connection.driver_class}" 
            trim="true"
            when="greater"
            length="0"/>
      </and>
      <then>
        <enki.antFork
          target="forked_cleanDbStorage"
          classpathref="enki.3p.ant.run.classpath"/>
      </then>
    </if>

    <if>
      <equals arg1="${enki.impl}" arg2="netbeans"/>
      <then>
        <delete>
          <fileset dir="${sample.catalog.dir}">
            <include name="EnkiCatalog.*"/>
          </fileset>
        </delete>
      </then>
    </if>
  </target>

  <target name="forked_cleanDbStorage">
    <property 
      file="${test.dir}/TestStorage.properties" 
      prefix="cleanSampleRepos"/>

    <echo>
      Executing:
        ${cleanSampleRepos.org.eigenbase.enki.dev.dropStorage}
        ${cleanSampleRepos.org.eigenbase.enki.dev.createStorage}
    </echo>
    <sql
        driver="${cleanSampleRepos.hibernate.connection.driver_class}"
        url="${cleanSampleRepos.hibernate.connection.url}" 
        userid="${cleanSampleRepos.hibernate.connection.username}"
        password="${cleanSampleRepos.hibernate.connection.password}">
      ${cleanSampleRepos.org.eigenbase.enki.dev.dropStorage}
      ${cleanSampleRepos.org.eigenbase.enki.dev.createStorage}
    </sql>
  </target>

  <target 
      name="createSampleRepository"
      depends="clean,compile.dependencies,enki_mdr.taskdef,configureSampleRepository,cleanSampleRepository">

    <!-- Choose generator class -->
    <enki.set-generator-property impl="${enki.impl}" property="gen.cls"/>

    <!-- Convert metamodel to XMI -->
    <ant dir="${sample.dir}"/>

    <mkdir dir="${sample.catalog.dir}/java"/>

    <!-- Synthesize model into Java code -->
    <enki.mdr>
      <mdr-tasks>
        <mapJava
            file="${sample.model.xmi}"
            dir="${sample.catalog.dir}/java"
            extent="SampleMetamodel"
            generatorClass="${gen.cls}"/>
      </mdr-tasks>
    </enki.mdr>

    <enki.javac
      srcdir="${sample.catalog.dir}/java"
      destdir="${sample.catalog.dir}/java"
      classpathref="enki.sample.build.classpath">
      <include name="**/*.java"/>
    </enki.javac>
    <jar jarfile="${sample.jar}">
      <fileset dir="${sample.catalog.dir}/java">
        <include name="**/*.java"/>
        <include name="**/*.class"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      </fileset>
    </jar>

    <!-- create repository -->
    <enki.antFork 
      target="forked_importSampleMetamodel"
      classpathref="sample.mdr.classpath"/>

    <!-- TODO: write DTD -->
    <!--
    <enki.mdr propertiesFile="${test.dir}/TestStorage.properties">
      <mdr-tasks>
        <writeDtd extent="SampleMetamodel" file="some.dtd"/>
      </mdr-tasks>
    </enki.mdr>
    -->

    <antcall target="compile.impl"/>
  </target>

  <target name="forked_importSampleMetamodel" depends="enki_mdr.taskdef">
    <enki.mdr propertiesFile="${test.dir}/TestStorage.properties">
      <mdr-tasks>
        <createExtent name="SampleMetamodel"/>
        <importXmi 
            extent="SampleMetamodel"
            file="${sample.model.xmi}" />
        <createExtent 
            name="SampleRepository"
            extent="SampleMetamodel"
            package="EEM"/>
      </mdr-tasks>
    </enki.mdr>
  </target>

  <target name="jar" depends="compile">
    <mkdir dir="${dist.dir}"/>
    <jar jarfile="${enki.dist.jar}">
      <fileset dir="${classes.dir}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${src.dir}">
        <include name="**/*.xml"/>
      </fileset>
    </jar>
  </target>

  <target name="compile" depends="compile.dependencies">
    <antcall target="compile.impl" inheritAll="true" inheritRefs="true"/>
  </target>

  <target name="compile.impl">
    <enki.javac
      srcdir="${src.dir}"
      destdir="${classes.dir}"
      classpathref="enki.sample.classpath">
      <include name="org/eigenbase/enki/prototype/**/*.java"/>
      <include name="org/eigenbase/enki/hibernate/prototype/**/*.java"/>
      <include name="org/eigenbase/enki/test/**/*.java"/>
    </enki.javac>
  </target>

  <target name="compile.dependencies" depends="init">
    <enki.javac
      srcdir="${src.dir}"
      destdir="${classes.dir}"
      classpathref="enki.build.classpath">
      <include name="**/*.java"/>
      <exclude name="org/eigenbase/enki/prototype/**/*.java"/>
      <exclude name="org/eigenbase/enki/hibernate/prototype/**/*.java"/>
      <exclude name="org/eigenbase/enki/test/**/*.java"/>
    </enki.javac>
  </target>

  <target name="test" depends="createSampleRepository,test-only"/>

  <target name="test-only">
    <delete>
      <fileset dir="${test.results.dir}" includes="*.txt"/>
    </delete>

    <junit
      printsummary="on"
      haltonerror="on"
      haltonfailure="on"
      fork="yes">

      <classpath>
        <path refid="enki.run.classpath"/>
        <pathelement path="${sample.jar}"/>
      </classpath>
      <sysproperty key="enki.home" value="${enki.dir}"/>
      <sysproperty key="enki.test.extent" value="SampleRepository"/>
      <formatter type="plain"/>
      <batchtest todir="${test.results.dir}">
        <fileset dir="${classes.dir}">
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="init">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${test.results.dir}"/>
  </target>

  <target name="clean">
    <delete>
      <fileset dir="${classes.dir}" includes="**/*"/>
      <fileset dir="${enki.dir}" includes="mdr.bt?"/>
    </delete>

    <!-- Clean up sample -->
    <ant dir="${sample.dir}" target="clean"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${sample.catalog.dir}/java" includes="**/*"/>
    </delete>
  </target>

  <target name="start-mysql-server">
    <if>
      <available file="${mysql.inst.dir}/bin" type="dir"/>
      <then>
        <start-mysql-server/>
      </then>
      <else>
        <fail message="MYSQL_HOME is not set, or not set properly."/>
      </else>
    </if>
  </target>

  <target name="start-mysql-server-with-logging">
    <if>
      <available file="${mysql.inst.dir}/bin" type="dir"/>
      <then>
        <start-mysql-server with-logging="true"/>
      </then>
      <else>
        <fail message="MYSQL_HOME is not set, or not set properly."/>
      </else>
    </if>
  </target>

  <target name="restart-mysql-server" depends="shutdown-mysql-server,start-mysql-server"/>

  <target name="restart-mysql-server-with-logging" depends="shutdown-mysql-server,start-mysql-server-with-logging"/>

  <target name="stop-mysql-server" depends="shutdown-mysql-server"/>

  <target name="shutdown-mysql-server">
    <if>
      <available file="${mysql.inst.dir}/bin" type="dir"/>
      <then>
        <shutdown-mysql-server/>
      </then>
      <else>
        <fail message="MYSQL_HOME is not set, or not set properly."/>
      </else>
    </if>
  </target>

  <!-- ==================================================================== -->
  <!-- TEMPORARY PLACEHOLDER FOR FARRAGO DEV TESTING -->

  <!-- Farrago Catalog properties -->
  <property name="farrago.xmi.dir" location="../dev/farrago/catalog/xmi"/>
  <property name="farrago.cwm.xmi" location="${farrago.xmi.dir}/cwm-1.1.xml"/>

  <property name="farrago.dir" location="${test.dir}/farrago"/>
  <property name="farrago.catalog.dir" location="${farrago.dir}/catalog"/>
  <property 
    name="FarragoExtMetamodelTransformed.xmi"
    location="${farrago.catalog.dir}/xmi/FarragoExtMetamodelTransformed.xmi"/>
  <property 
    name="farrago.model.xmi" 
    location="${farrago.catalog.dir}/xmi/FarragoMetamodel.xmi"/>
  <property 
    name="farrago-catalog.jar"
    location="${farrago.dir}/farrago-catalog.jar"/>


  <target name="configureFarragoRepository">
    <copy 
        file="${test.config.dir}/${enki.impl}/TestStorage.properties"
        tofile="${test.dir}/TestStorage.properties"
        overwrite="true">
      <filterset begintoken="$${" endtoken="}">
        <filter token="ENKI_CATALOG_DIR" value="${farrago.catalog.dir}"/>
      </filterset>
    </copy>

    <!-- classpath for Farrago model implementation JAR -->
    <path id="farrago-catalog.jar.ref">
      <pathelement location="${farrago-catalog.jar}"/>
    </path>
  </target>

  <!--
    Macro to merge CWM and FEM
  -->
  <macrodef name="farrago.synthesizeMetamodel">
    <attribute name="xmiDir" default="unspecified" />
    <attribute name="extMofBasename" default="unspecified" />
    <attribute name="extPresent" default="true" />
    <sequential>
      <xslt style="${farrago.xmi.dir}/transformCWM.xsl"
        in="${farrago.cwm.xmi}"
        out="@{xmiDir}/FarragoMetamodelUnresolved.xmi">
        <param name="femXmiFilename"
          expression="${FarragoExtMetamodelTransformed.xmi}"/>
        <param name="extXmiFilename"
          expression="@{xmiDir}/@{extMofBasename}Transformed.xmi"/>
        <param name="extPresent" expression="@{extPresent}"/>
      </xslt>
      <xslt style="${farrago.xmi.dir}/resolveCwmRefs.xsl"
        in="@{xmiDir}/FarragoMetamodelUnresolved.xmi"
        out="@{xmiDir}/FarragoMetamodel.xmi"/>
    </sequential>
  </macrodef>


  <target 
      name="createFarragoRepository"
      depends="clean,compile.dependencies,enki_mdr.taskdef,configureFarragoRepository">

    <!-- Choose generator class -->
    <enki.set-generator-property impl="${enki.impl}" property="gen.cls"/>

    <!-- Convert metamodel to XMI -->
    <ant dir="${farrago.dir}"/>

    <mkdir dir="${farrago.catalog.dir}/java"/>

    <!-- Synthesize model into Java code -->
    <farrago.synthesizeMetamodel
      xmiDir="${farrago.catalog.dir}/xmi"
      extMofBasename="ExtModel"
      extPresent=""/>

    <enki.mdr>
      <mdr-tasks>
        <mapJava
            file="${farrago.model.xmi}"
            dir="${farrago.catalog.dir}/java"
            extent="FarragoMetamodel"
            generatorClass="${gen.cls}"/>
      </mdr-tasks>
    </enki.mdr>

    <enki.javac
      srcdir="${farrago.catalog.dir}/java"
      destdir="${farrago.catalog.dir}/java"
      classpathref="enki.sample.build.classpath">
      <include name="**/*.java"/>
    </enki.javac>
    <jar jarfile="${farrago-catalog.jar}">
      <fileset dir="${farrago.catalog.dir}/java">
        <include name="**/*.java"/>
        <include name="**/*.class"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      </fileset>
    </jar>

    <!-- create repository -->
    <enki.mdr 
        propertiesFile="${test.dir}/TestStorage.properties"
        modelPathRef="farrago-catalog.jar.ref">
      <mdr-tasks>
        <createExtent name="FarragoMetamodel"/>
        <importXmi 
            extent="FarragoMetamodel"
            file="${farrago.model.xmi}" />
        <createExtent 
            name="FarragoCatalog"
            extent="FarragoMetamodel"
            package="Farrago"/>
      </mdr-tasks>
    </enki.mdr>
    
    <!-- TODO: write DTD -->
    <!--
    <enki.mdr propertiesFile="${test.dir}/TestStorage.properties">
      <mdr-tasks>
        <writeDtd extent="FarragoMetamodel" file="some.dtd"/>
      </mdr-tasks>
    </enki.mdr>
    -->

    <antcall target="compile.impl"/>
  </target>

  <!-- END TEMPORARY PLACEHOLDER FOR FARRAGO DEV TESTING -->
  <!-- ==================================================================== -->
</project>

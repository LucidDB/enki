<?xml version="1.0" encoding="UTF-8"?>
<!--
// $Id$
// Enki generates and implements the JMI and MDR APIs for MOF metamodels.
// Copyright (C) 2007-2007 The Eigenbase Project
// Copyright (C) 2007-2007 Disruptive Tech
// Copyright (C) 2007-2007 LucidEra, Inc.
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
-->

<!-- Enki ant script for developer builds -->

<project name="enki" basedir="." default="compile">
  <property name="enki.dir" location="."/>

  <import file="buildMacros.xml"/>

  <!-- classpath for main build -->
  <path id="enki.build.classpath">
    <pathelement path="${enki.3p.build.classpath}"/>
  </path>
  <property name="enki.build.classpath" refid="enki.build.classpath"/>

  <!-- classpath for sample build -->
  <path id="enki.sample.build.classpath">
    <pathelement path="${enki.build.classpath}"/>
    <pathelement path="${classes.dir}"/>
  </path>
  <property name="enki.sample.build.classpath" refid="enki.sample.build.classpath"/>

  <!-- classpath for sample-dependent build -->
  <path id="enki.sample.classpath">
    <pathelement path="${enki.sample.build.classpath}"/>
    <pathelement path="${sample.jar}"/>
  </path>
  <property name="enki.sample.classpath" refid="enki.sample.classpath"/>

  <!-- classpath for execution -->
  <path id="enki.run.classpath">
    <pathelement path="${classes.dir}"/>
    <pathelement path="${src.dir}"/>
    <pathelement path="${enki.3p.run.classpath}"/>
  </path>
  <property name="enki.run.classpath" refid="enki.run.classpath"/>

  <property name="test.dir" location="${enki.dir}/test"/>
  <property name="test.config.dir" location="${test.dir}/config"/>
  <property name="test.results.dir" location="${test.dir}/results"/>
  <property name="test.catalog.dir" location="${test.dir}/catalog"/>

  <!-- Sample Catalog properties -->
  <property name="sample.dir" location="${test.dir}/sample"/>
  <property name="sample.catalog.dir" location="${sample.dir}/catalog"/>
  <property 
    name="sample.model.xmi" 
    location="${sample.catalog.dir}/xmi/EnkiSampleMetamodel.xmi"/>
  <property name="sample.jar" location="${sample.dir}/sample.jar"/>
  <property name="sample.dtd" location="${sample.catalog.dir}/xmi/sample.dtd"/>

  <!-- classpath for Sample model implementation JAR -->
  <path id="sample.mdr.classpath">
    <pathelement location="${sample.jar}"/>
    <path refid="enki.run.classpath"/>
    <path refid="ant.classpath"/>
  </path>
  <property name="sample.mdr.classpath" refid="sample.mdr.classpath"/>

  <!-- Sample Plugin properties -->
  <property 
    name="sample.plugin.model.xmi" 
    location="${sample.catalog.dir}/xmi/EnkiSamplePluginMetamodel.xmi"/>
  <property name="sample.plugin.jar" location="${sample.dir}/sample-plugin.jar"/>
  <property name="sample.plugin.dtd" location="${sample.catalog.dir}/xmi/sample-plugin.dtd"/>

  <!-- classpath for Sample plugin model implementation JAR -->
  <path id="sample.plugin.mdr.classpath">
    <pathelement location="${sample.plugin.jar}"/>
    <path refid="sample.mdr.classpath"/>
  </path>
  <property name="sample.plugin.mdr.classpath" refid="sample.plugin.mdr.classpath"/>

  <!-- 
    Implementation type.  One of hibernate, netbeans.  Defaults to
    value from customBuild.properties.
  -->
  <property name="enki.impl" value="${enki.impl.default}"/>
  <property name="enki.all.impl" value="netbeans,hibernate"/>

  <!-- classpath for javadoc generation -->
  <path id="enki.javadoc.classpath">
    <pathelement path="${enki.3p.ant.run.classpath}"/>
    <pathelement location="${sample.jar}"/>
  </path>
  <property name="enki.javadoc.classpath" refid="enki.javadoc.classpath"/>

  <target name="createClasspathFile">
    <delete file="${file.classpath}" quiet="true"/>
    <echo file="${file.classpath}" message="${enki.run.classpath}"/>
  </target>
  <property name="file.classpath" location="${enki.dir}/classpath.gen"/>

  <target name="configureSampleRepository">
    <copy todir="${test.dir}" overwrite="true">
      <fileset dir="${test.config.dir}/${enki.impl}">
        <include name="TestStorage.properties"/>
        <include name="TestPluginStorage.properties"/>
      </fileset>
      <filterset begintoken="$${" endtoken="}">
        <filter token="ENKI_CATALOG_DIR" value="${sample.catalog.dir}"/>
      </filterset>
    </copy>

    <!-- Always copy and transform this file: it's used for comparison testing
         between Netbeans MDR and Enki repository implementations. -->
    <copy 
        file="${test.config.dir}/netbeans/ComparisonTestStorage.properties"
        tofile="${test.dir}/ComparisonTestStorage.properties"
        overwrite="true">
      <filterset begintoken="$${" endtoken="}">
        <filter token="ENKI_CATALOG_DIR" value="${test.catalog.dir}"/>
      </filterset>
    </copy>
  </target>

  <target 
      name="cleanSampleRepository"
      depends="compile.dependencies,enki_mdr.taskdef,configureSampleRepository,cleanDbStorage"/>

  <target name="cleanDbStorage">
    <property 
      file="${test.dir}/TestStorage.properties" 
      prefix="cleanSampleRepos"/>

    <if>
      <and>
        <not>
          <equals arg1="${enki.impl}" arg2="netbeans"/>
        </not>
        <length
            string="${cleanSampleRepos.org.eigenbase.enki.dev.connection.driver_class}" 
            trim="true"
            when="greater"
            length="0"/>
      </and>
      <then>
        <enki.antFork
          target="forked_cleanDbStorage"
          classpathref="enki.3p.ant.run.classpath"/>
      </then>
    </if>

    <if>
      <equals arg1="${enki.impl}" arg2="netbeans"/>
      <then>
        <delete>
          <fileset dir="${sample.catalog.dir}">
            <include name="EnkiCatalog.*"/>
          </fileset>
        </delete>
      </then>
    </if>

    <delete dir="${sample.catalog.dir}/java" includes="**/*"/>
  </target>

  <target name="forked_cleanDbStorage">
    <property 
      file="${test.dir}/TestStorage.properties" 
      prefix="cleanSampleRepos"/>

    <echo>
      Executing:
        ${cleanSampleRepos.org.eigenbase.enki.dev.dropStorage}
        ${cleanSampleRepos.org.eigenbase.enki.dev.createStorage}
    </echo>
    <sql
        driver="${cleanSampleRepos.org.eigenbase.enki.dev.connection.driver_class}"
        url="${cleanSampleRepos.org.eigenbase.enki.dev.connection.url}" 
        userid="${cleanSampleRepos.org.eigenbase.enki.dev.connection.username}"
        password="${cleanSampleRepos.org.eigenbase.enki.dev.connection.password}">
      ${cleanSampleRepos.org.eigenbase.enki.dev.dropStorage}
      ${cleanSampleRepos.org.eigenbase.enki.dev.createStorage}
    </sql>
  </target>

  <target 
      name="cleanSamplePluginRepository"
      depends="enki_mdr.taskdef,cleanPluginDbStorage">

    <ant dir="${sample.dir}" target="cleanPlugin"/>

    <delete>
      <fileset dir="${enki.dir}" includes="mdr.bt?"/>
    </delete>
  </target>

  <target name="cleanPluginDbStorage">
    <property 
      file="${test.dir}/TestPluginStorage.properties" 
      prefix="cleanSamplePluginRepos"/>

    <if>
      <and>
        <not>
          <equals arg1="${enki.impl}" arg2="netbeans"/>
        </not>
        <length
            string="${cleanSamplePluginRepos.org.eigenbase.enki.dev.connection.driver_class}" 
            trim="true"
            when="greater"
            length="0"/>
      </and>
      <then>
        <enki.antFork
          target="forked_cleanPluginDbStorage"
          classpathref="enki.3p.ant.run.classpath"/>
      </then>
    </if>

    <if>
      <equals arg1="${enki.impl}" arg2="netbeans"/>
      <then>
        <delete>
          <fileset dir="${sample.catalog.dir}">
            <include name="EnkiPluginCatalog.*"/>
          </fileset>
        </delete>
      </then>
    </if>

    <delete dir="${sample.catalog.dir}/plugin/java" includes="**/*"/>
  </target>

  <target name="forked_cleanPluginDbStorage">
    <property 
      file="${test.dir}/TestPluginStorage.properties" 
      prefix="cleanSamplePluginRepos"/>

    <echo>
      Executing:
        ${cleanSamplePluginRepos.org.eigenbase.enki.dev.dropStorage}
        ${cleanSamplePluginRepos.org.eigenbase.enki.dev.createStorage}
    </echo>
    <sql
        driver="${cleanSamplePluginRepos.org.eigenbase.enki.dev.connection.driver_class}"
        url="${cleanSamplePluginRepos.org.eigenbase.enki.dev.connection.url}" 
        userid="${cleanSamplePluginRepos.org.eigenbase.enki.dev.connection.username}"
        password="${cleanSamplePluginRepos.org.eigenbase.enki.dev.connection.password}">
      ${cleanSamplePluginRepos.org.eigenbase.enki.dev.dropStorage}
      ${cleanSamplePluginRepos.org.eigenbase.enki.dev.createStorage}
    </sql>
  </target>

  <target 
      name="createSampleRepository"
      depends="clean,compile.dependencies,enki_mdr.taskdef,configureSampleRepository,cleanSampleRepository">

    <!-- Choose generator class -->
    <enki.set-generator-property impl="${enki.impl}" property="gen.cls"/>

    <!-- Convert metamodel to XMI -->
    <ant dir="${sample.dir}"/>

    <mkdir dir="${sample.catalog.dir}/java"/>

    <!-- Synthesize model into Java code -->
    <enki.mdr>
      <mdr-tasks>
        <mapJava
            file="${sample.model.xmi}"
            dir="${sample.catalog.dir}/java"
            extent="SampleMetamodel"
            generatorClass="${gen.cls}"
            generatorOptions="tablePrefix='SMPL_'"/>
      </mdr-tasks>
    </enki.mdr>

    <enki.javac
      srcdir="${sample.catalog.dir}/java"
      destdir="${sample.catalog.dir}/java"
      classpathref="enki.sample.build.classpath">
      <include name="**/*.java"/>
    </enki.javac>
    <jar jarfile="${sample.jar}">
      <fileset dir="${sample.catalog.dir}/java">
        <include name="**/*.java"/>
        <include name="**/*.class"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      </fileset>
    </jar>

    <!-- create repository -->
    <enki.antFork 
      target="forked_importSampleMetamodel"
      classpathref="sample.mdr.classpath"/>

    <antcall target="compile.impl"/>
  </target>

  <target
      name="createSamplePluginRepository"
      depends="cleanSamplePluginRepository">

    <!-- Choose generator class -->
    <enki.set-generator-property impl="${enki.impl}" property="gen.cls"/>

    <!-- Convert metamodel to XMI -->
    <ant dir="${sample.dir}" target="convertPluginMetamodel"/>

    <mkdir dir="${sample.catalog.dir}/plugin/java"/>

    <!-- Synthesize model into Java code -->
    <enki.mdr>
      <mdr-tasks>
        <mapJava
            file="${sample.plugin.model.xmi}"
            dir="${sample.catalog.dir}/plugin/java"
            extent="SampleMetamodel"
            generatorClass="${gen.cls}"
            generatorOptions="tablePrefix='SMPL_',plugin='true',include='eem.sample.plugin'"/>
      </mdr-tasks>
    </enki.mdr>

    <enki.javac
        srcdir="${sample.catalog.dir}/plugin/java"
        destdir="${sample.catalog.dir}/plugin/java">
      <classpath>
        <pathelement path="${enki.sample.build.classpath}"/>
        <pathelement path="${sample.jar}"/>
      </classpath>
      <include name="**/*.java"/>
    </enki.javac>
    <jar jarfile="${sample.plugin.jar}">
      <fileset dir="${sample.catalog.dir}/plugin/java">
        <include name="**/*.java"/>
        <include name="**/*.class"/>
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
      </fileset>
    </jar>

    <!-- create repository -->
    <enki.antFork 
      target="forked_importSamplePluginMetamodel"
      classpathref="sample.plugin.mdr.classpath"/>
  </target>

  <target name="forked_importSampleMetamodel" depends="enki_mdr.taskdef">
    <enki.mdr propertiesFile="${test.dir}/TestStorage.properties">
      <mdr-tasks>
        <createExtent name="SampleMetamodel"/>
        <importXmi 
            extent="SampleMetamodel"
            file="${sample.model.xmi}" />
        <createExtent 
            name="SampleRepository"
            extent="SampleMetamodel"
            package="EEM"/>
      </mdr-tasks>
    </enki.mdr>

    <enki.mdr propertiesFile="${test.dir}/TestStorage.properties">
      <mdr-tasks>
        <writeDtd extent="SampleRepository" file="${sample.dtd}"/>
      </mdr-tasks>
    </enki.mdr>
  </target>

  <target name="forked_importSamplePluginMetamodel" depends="enki_mdr.taskdef">
    <enki.mdr propertiesFile="${test.dir}/TestPluginStorage.properties">
      <mdr-tasks>
        <createExtent name="SampleMetamodel"/>
        <importXmi 
            extent="SampleMetamodel"
            file="${sample.plugin.model.xmi}" />
        <createExtent 
            name="SampleRepository"
            extent="SampleMetamodel"
            package="EEM"/>
      </mdr-tasks>
    </enki.mdr>

    <enki.mdr propertiesFile="${test.dir}/TestPluginStorage.properties">
      <mdr-tasks>
        <writeDtd extent="SampleRepository" file="${sample.plugin.dtd}"/>
      </mdr-tasks>
    </enki.mdr>
  </target>

  <target name="dist" depends="createSampleRepository,javadoc">
    <fail unless="package.name"/>
    <fail unless="product.version.major"/>
    <fail unless="product.version.minor"/>
    <fail unless="product.version.point"/>

    <jar jarfile="${enki.dist.jar}" compress="true">
      <fileset dir="${enki.dir}">
        <include name="LICENSE"/>
      </fileset>
      <fileset dir="${classes.dir}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${src.dir}">
        <include name="**/*.xml"/>
      </fileset>
    </jar>

    <jar jarfile="${enki.dist.src.jar}" compress="true">
      <fileset dir="${enki.dir}">
        <include name="LICENSE"/>
      </fileset>
      <fileset dir="${src.dir}">
        <include name="**/*"/>
      </fileset>
    </jar>

    <jar jarfile="${enki.dist.doc.jar}" compress="true">
      <fileset dir="${enki.dir}">
        <include name="LICENSE"/>
      </fileset>
      <fileset dir="${doc.dir}">
        <include name="**/*"/>
      </fileset>
    </jar>

    <jar jarfile="${enki.dist.findbugs.jar}" compress="true">
      <fileset dir="${src.dir}/org/eigenbase/enki/tools/findbugs">
        <include name="*.xml"/>
      </fileset>
      <fileset dir="${classes.dir}">
        <include name="org/eigenbase/enki/tools/findbugs/**.class"/>
      </fileset>
    </jar>

    <tar destfile="${enki.dist.tarball}" compression="gzip">
      <tarfileset dir="${dist.dir}" prefix="${enki.dist.prefix}">
        <include name="*.jar"/>
      </tarfileset>
    </tar>

    <tar destfile="${enki.lib.dist.tarball}" compression="gzip">
      <tarfileset dir="${hibernate.dir}" prefix="${enki.dist.prefix}">
        <include name="*.jar"/>
      </tarfileset>
      <tarfileset dir="${hibernate.dir}/lib" prefix="${enki.dist.prefix}">
        <include name="*"/>
      </tarfileset>
      <tarfileset dir="${ehcache.dir}" prefix="${enki.dist.prefix}">
        <include name="*.jar"/>
      </tarfileset>
      <tarfileset dir="${commons-logging.dir}" prefix="${enki.dist.prefix}">
        <include name="*.jar"/>
      </tarfileset>
      <tarfileset dir="${commons-collections.dir}" prefix="${enki.dist.prefix}">
        <include name="*.jar"/>
        <exclude name="*testframework*.jar"/>
      </tarfileset>
    </tar>
  </target>

  <target name="compile" depends="compile.dependencies">
    <antcall target="compile.impl" inheritAll="true" inheritRefs="true"/>
  </target>

  <target name="compile.impl" depends="init">
    <enki.javac
      srcdir="${src.dir}"
      destdir="${classes.dir}"
      classpathref="enki.sample.classpath">
      <include name="org/eigenbase/enki/test/**/*.java"/>
    </enki.javac>
  </target>

  <target name="compile.dependencies" depends="init">
    <enki.javac
      srcdir="${src.dir}"
      destdir="${classes.dir}"
      classpathref="enki.build.classpath">
      <include name="**/*.java"/>
      <exclude name="org/eigenbase/enki/test/**/*.java"/>
    </enki.javac>
  </target>

  <target name="test-all-impls">
    <foreach
        list="${enki.all.impl}" 
        target="test-single-impl"
        param="impl.name"/>
    <antcall target="checkJavadoc"/>
  </target>

  <target name="test-single-impl">
    <fail 
      message="Must be invoked via test-all-impls target" 
      unless="impl.name"/>

    <exec executable="ant" failonerror="true" taskname="test-${impl.name}">
      <arg value="${enki.forkVerbosity}"/>
      <arg value="test-with-setup"/>
      <arg value="-Denki.impl=${impl.name}"/>
    </exec>
  </target>

  <target name="test" depends="test-with-setup,checkJavadoc"/>

  <target name="test-with-setup" depends="createSampleRepository,createSamplePluginRepository,test-only"/>

  <target name="test-only">
    <echo message="**********************************************"/>
    <echo message="Testing ${enki.impl} implementation"/>
    <echo message="**********************************************"/>

    <delete>
      <fileset dir="${test.results.dir}" includes="*.txt"/>
    </delete>

    <junit
      printsummary="on"
      haltonerror="on"
      haltonfailure="on"
      fork="yes">

      <classpath>
        <path refid="enki.run.classpath"/>
        <pathelement path="${sample.jar}"/>
      </classpath>
      <jvmarg line="${assertions.jvmarg}"/>
      <sysproperty key="enki.home" value="${enki.dir}"/>
      <sysproperty key="enki.test.extent" value="SampleRepository"/>
      <formatter type="plain"/>
      <batchtest todir="${test.results.dir}">
        <fileset dir="${classes.dir}">
          <include name="**/test/**/*Test.class" unless="enki.test.pattern"/>
          <include name="${enki.test.pattern}" if="enki.test.pattern"/>
          <exclude name="**/test/plugin/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>

    <antcall target="test-plugin-only"/>
  </target>

  <target name="test-plugin-only">
    <junit
      printsummary="on"
      haltonerror="on"
      haltonfailure="on"
      fork="yes">

      <classpath>
        <path refid="enki.run.classpath"/>
        <pathelement path="${sample.jar}"/>
        <pathelement path="${sample.plugin.jar}"/>
      </classpath>
      <jvmarg line="${assertions.jvmarg}"/>
      <sysproperty key="enki.home" value="${enki.dir}"/>
      <sysproperty key="enki.test.extent" value="SampleRepository"/>
      <sysproperty 
          key="enki.storageProps"
          value="${test.dir}/TestPluginStorage.properties"/>
      <formatter type="plain"/>
      <batchtest todir="${test.results.dir}">
        <fileset dir="${classes.dir}">
          <include name="**/test/plugin/*Test.class" unless="enki.test.pattern"/>
          <include name="${enki.test.pattern}" if="enki.test.pattern"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="init">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${trace.dir}"/>
    <mkdir dir="${test.results.dir}"/>
    <mkdir dir="${test.catalog.dir}"/>

    <if>
      <not>
        <available file="${enki.mdr.log.config}"/>
      </not>
      <then>
        <propertyfile 
            file="${enki.mdr.log.config}"
            comment="Developer tracing configuration">
          <entry key="handlers" default="java.util.logging.FileHandler"/>
          <entry key="java.util.logging.FileHandler.append" default="true"/>
          <entry 
              key="java.util.logging.FileHandler.formatter"
              default="java.util.logging.SimpleFormatter"/>
          <entry
              key="java.util.logging.FileHandler.pattern"
              default="${trace.dir}/EnkiTrace.log"/>
          <entry
              key="org.hibernate.tool.hbm2ddl.level" default="FINEST"/>
          <entry key=".level" default="CONFIG"/>
        </propertyfile>
      </then>
    </if>
  </target>

  <target name="clean">
    <delete quiet="true">
      <fileset dir="${classes.dir}" includes="**/*"/>
      <fileset dir="${enki.dir}" includes="mdr.bt?"/>
      <fileset dir="${trace.dir}">
        <include name="*.log"/>
        <include name="*.log.*"/>
      </fileset>
      <fileset dir="${javadoc.dir}" includes="**/*"/>
      <fileset dir="${dist.dir}" includes="*.jar"/>
    </delete>

    <!-- Clean up sample -->
    <ant dir="${sample.dir}" target="clean"/>
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${sample.catalog.dir}/java" includes="**/*"/>
      <fileset dir="${sample.catalog.dir}/plugin/java" includes="**/*"/>
    </delete>
  </target>

  <!-- Ensure that javadoc has no warnings/errors. -->
  <target name="checkJavadoc">
    <record 
        name="javadoc-complaints.log"
        action="start" 
        emacsmode="true"
        loglevel="warn"/>
    <antcall target="javadoc"/>
    <record name="javadoc-complaints.log" action="stop"/>

    <loadfile srcFile="javadoc-complaints.log" property="javadoc.complaints">
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.LineContains">
          <param type="negate" value="true"/>
          <param type="contains" value="Error fetching URL"/>
        </filterreader>
        <striplinebreaks />
      </filterchain>
    </loadfile>

    <fail
        if="javadoc.complaints"
        message="Javadoc reported warnings or errors; see javadoc-complaints.log for details"/>

    <delete file="javadoc-complaints.log"/>
  </target>

  <target name="cleanJavadoc">
    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="${javadoc.dir}" includes="**/*"/>
    </delete>
  </target>

  <target name="javadoc">
    <mkdir dir="${javadoc.dir}"/>
    <javadoc
      maxmemory="1024m"
      private="true"
      destdir="${javadoc.dir}"
      source="${enki.javasrc.version}"
      classpathref="enki.javadoc.classpath">
      <packageset dir="${src.dir}">
        <include name="**"/>
      </packageset>
      <link href="http://java.sun.com/products/jmi/jmi-1_0-fr-doc"/>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
      <link href="http://junit.sourceforge.net/javadoc_40"/>
      <link href="http://www.eigenbase.org/mdr/javadoc"/>
    </javadoc>
  </target>

  <target name="start-mysql-server">
    <if>
      <available file="${mysql.inst.dir}/bin" type="dir"/>
      <then>
        <start-mysql-server/>
      </then>
      <else>
        <fail message="MYSQL_HOME is not set, or not set properly."/>
      </else>
    </if>
  </target>

  <target name="start-mysql-server-with-logging">
    <if>
      <available file="${mysql.inst.dir}/bin" type="dir"/>
      <then>
        <start-mysql-server with-logging="true"/>
      </then>
      <else>
        <fail message="MYSQL_HOME is not set, or not set properly."/>
      </else>
    </if>
  </target>

  <target name="restart-mysql-server" depends="shutdown-mysql-server,start-mysql-server"/>

  <target name="restart-mysql-server-with-logging" depends="shutdown-mysql-server,start-mysql-server-with-logging"/>

  <target name="stop-mysql-server" depends="shutdown-mysql-server"/>

  <target name="shutdown-mysql-server">
    <if>
      <available file="${mysql.inst.dir}/bin" type="dir"/>
      <then>
        <shutdown-mysql-server/>
      </then>
      <else>
        <fail message="MYSQL_HOME is not set, or not set properly."/>
      </else>
    </if>
  </target>
</project>
